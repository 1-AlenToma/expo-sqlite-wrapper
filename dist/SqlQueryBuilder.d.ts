import { IDataBaseExtender, NonFunctionPropertyNames, IBaseModule, SingleValue, ArrayValue, NumberValue, IChildQueryLoader, IChildLoader, IQuaryResult, IQuery, IQueryResultItem, IDatabase, StringValue, IId } from './expo.sql.wrapper.types';
export declare const getColumns: (fn: any) => any;
export declare class Query<T extends IId<D>, D extends string> implements IQuery<T, D> {
    Queries: any[];
    tableName: D;
    Children: IChildLoader<D>[];
    database: IDataBaseExtender<D>;
    private currentIndex;
    constructor(tableName: D, database: IDatabase<D>);
    private hasNext;
    private prevColumn;
    private prevValue;
    private nextValue;
    private getLast;
    private cleanLast;
    private getValue;
    private validateValue;
    private validate;
    Column(columnName: NonFunctionPropertyNames<T>): this;
    EqualTo(value: SingleValue): this;
    NotEqualTo(value: SingleValue): this;
    EqualAndGreaterThen(value: NumberValue | StringValue): this;
    EqualAndLessThen(value: NumberValue | StringValue): this;
    Start(): this;
    End(): this;
    OR(): this;
    AND(): this;
    GreaterThan(value: NumberValue | StringValue): this;
    LessThan(value: NumberValue | StringValue): this;
    IN(value: ArrayValue): this;
    NotIn(value: ArrayValue): this;
    Null(): this;
    NotNull(): this;
    Contains(value: StringValue): this;
    StartWith(value: StringValue): this;
    EndWith(value: StringValue): this;
    OrderByAsc(columnName: NonFunctionPropertyNames<T>): this;
    OrderByDesc(columnName: NonFunctionPropertyNames<T>): this;
    Limit(value: number): this;
    LoadChildren<B extends IId<D>>(childTableName: D, parentProperty: NonFunctionPropertyNames<T>): IChildQueryLoader<B, T, D>;
    LoadChild<B extends IId<D>>(childTableName: D, parentProperty: NonFunctionPropertyNames<T>): IChildQueryLoader<B, T, D>;
    getQueryResult(operation?: "SELECT" | "DELETE"): IQuaryResult<D>;
    delete(): Promise<void>;
    firstOrDefault(): Promise<IQueryResultItem<T, D>>;
    findOrSave(item: T & IBaseModule<D>): Promise<IQueryResultItem<T, D>>;
    toList(): Promise<IQueryResultItem<T, D>[]>;
}
