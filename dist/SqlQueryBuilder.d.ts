import { IBaseModule, SingleValue, ArrayValue, NumberValue, IChildQueryLoader, IChildLoader, IQuaryResult, IQuery, IQueryResultItem, IDatabase, StringValue } from './expo.sql.wrapper.types';
export declare const createQueryResultType: <T, D extends string>(item: any, database: IDatabase<D>, children?: IChildLoader<D>[]) => Promise<IQueryResultItem<T, D>>;
export declare const validateTableName: <T, D extends string>(item: IBaseModule<D>, tableName?: D) => IBaseModule<D>;
export declare const single: <T>(items: any[]) => T;
export declare const getColumns: (fn: any) => any;
export declare class Query<T, D extends string> implements IQuery<T, D> {
    Queries: any[];
    tableName: D;
    Children: IChildLoader<D>[];
    database: IDatabase<D>;
    private currentIndex;
    constructor(tableName: D, database: IDatabase<D>);
    private hasNext;
    private prevValue;
    private nextValue;
    private getLast;
    private cleanLast;
    private getValue;
    private validateValue;
    private validate;
    Column<B>(item: ((x: T) => B) | string): this;
    EqualTo(value: SingleValue): this;
    NotEqualTo(value: SingleValue): this;
    EqualAndGreaterThen(value: NumberValue | StringValue): this;
    EqualAndLessThen(value: NumberValue | StringValue): this;
    Start(): this;
    End(): this;
    OR(): this;
    AND(): this;
    GreaterThan(value: NumberValue | StringValue): this;
    LessThan(value: NumberValue | StringValue): this;
    IN(value: ArrayValue): this;
    NotIn(value: ArrayValue): this;
    Null(): this;
    NotNull(): this;
    Contains(value: StringValue): this;
    StartWith(value: StringValue): this;
    EndWith(value: StringValue): this;
    LoadChildren<B>(childTableName: D, parentProperty: ((x: T) => B) | string): IChildQueryLoader<B, T, D>;
    LoadChild<B>(childTableName: D, parentProperty: ((x: T) => B) | string): IChildQueryLoader<B, T, D>;
    getQueryResult(): IQuaryResult<D>;
    firstOrDefault(): Promise<IQueryResultItem<T, D>>;
    findOrSave(item: T & IBaseModule<D>): Promise<IQueryResultItem<T, D>>;
    toList(): Promise<any[]>;
}
